name: Build Documents

on:
  issue_comment:
    types: [created, edited]

jobs:
  build_en-US_pdf:
    name: Build PDF
    if: ${{ github.event.issue.title }} == 'Document Build Request'
    runs-on: ubuntu-24.04
    steps:
      - run: echo "The issue title is ${{ github.event.issue.title }}"
      - run: echo "Branch is ${{ github.ref }}"
      - run: echo "Repo is ${{ github.repository }}"
      - name: Read owasp_pdf parameters
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "COMMENT=$COMMENT_BODY" >> $GITHUB_ENV
          IFS=',' read -ra PARAMS <<< '${{ env.COMMENT }}'
          if echo ${PARAMS[0]};
          then
            echo "LANG=${PARAMS[0]}" >> $GITHUB_ENV
          else
            echo "LANG=" >> $GITHUB_ENV;
          fi
          if echo ${PARAMS[1]};
          then
            echo "MT=${PARAMS[1]}" >> $GITHUB_ENV
          else
            echo "MT=" >> $GITHUB_ENV;
          fi
          if echo ${PARAMS[2]};
          then
            echo "X=${PARAMS[2]}" >> $GITHUB_ENV
          else
            echo "X=" >> $GITHUB_ENV;
          fi
      - run: echo "${{ env.LANG }}"
      - run: echo "${{ env.MT }}"
      - run: echo "${{ env.X }}"
      - name: Adjust LANG
        if: ! contains(env.LANG, '-')
        run: echo "LANG=" >> $GITHUB_ENV
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Define target branch name
        run: |
          MAIN_SHA="PDF_${{ github.sha }}"
          echo "TARGET_BRANCH_NAME=$MAIN_SHA" >> $GITHUB_ENV
      - name: Check if the target branch exists
        run: |
          echo ${{ env.TARGET_BRANCH_NAME }}
          BRANCH_NAME=${{ env.TARGET_BRANCH_NAME }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git ls-remote --heads origin | grep "${BRANCH_NAME}";
          then
            echo "BRANCH_EXISTS=yes" >> $GITHUB_ENV;
          else
            echo "BRANCH_EXISTS=no" >> $GITHUB_ENV;
          fi
      - run: echo "The target branch exists? ${{ env.BRANCH_EXISTS }}"
      - name: Download zip file
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          curl -L -o main.zip "https://github.com/tetsuoseto/AISVS/archive/refs/heads/main.zip"
      - name: Unzip the file
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          unzip main.zip -d UNZIPPED
      - name: List the files checked out to the build workspace
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          ls -la ${{ github.workspace }}
      - name: Copy owasp_pdf
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          cp UNZIPPED/AISVS-main/1.0/blddoc/owasp_pdf ${{ github.workspace }}/1.0/blddoc/owasp_pdf
      - name: List files under 1.0/blddoc
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          cd 1.0/blddoc
          ls -la
      - name: List files under 1.0/blddoc/asv
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          cd 1.0/blddoc/asv
          ls -la
      - name: Call ./owasp_pdf
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          cd 1.0/blddoc
          # ./owasp_pdf -s -l ASV_${{ env.LANG }} --hdr '${{ github.sha }}'
          ./owasp_pdf -s -l ASV_en-US --hdr '${{ github.sha }}'
      - name: Delete large used files
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        run: |
          rm ${{ github.workspace }}/1.0/blddoc/owasp_pdf
          rm main.zip
      - name: Commit the changes
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:  |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b PDF_${{ github.sha }}
          git add .
          git commit -m "PDF created with the commit ${{ github.sha }}"
          git push --set-upstream origin PDF_${{ github.sha }}
      - name: Create Pull Request with the generated PDF
        if: ${{ env.BRANCH_EXISTS == 'no' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:  |
          gh pr create --base 'main' --head 'PDF_${{ github.sha }}' --title 'Automated Pull Request with PDF (${{ github.sha }})' --body 'PDF generated by OWASP PDF 5 with the commit ${{ github.sha }}'
